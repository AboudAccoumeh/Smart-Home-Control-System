#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <SoftwareSerial.h>
#include <Servo.h>
#define LDR A0

bool door1State = false;
String userInput = "";
int humidity = 0;


bool sendUserInput = false;
String userInputToSend = "";

struct Door {
  unsigned long prevTime = 999999999;
  int interpolation = -999;
  float duration;
  int startingAngle;//when door is closed
  int endingAngle;//when door is opened
  bool atStart = true;//state of the door
  bool oldAtStart = true;//old state of the door
  int pin;
  Servo servo;
};
Door door2;
Door window;


const char* ssid = "esp8266";
const char* password = "";

const int light1 = D5;
const int light2 = D6;
const int light3 = D7;
ESP8266WebServer server(80);
SoftwareSerial CommunicationSerial(D2, D3);

IPAddress customIP(192, 168, 1, 1);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);

const char* htmlPage = "<!DOCTYPE html>"
"<html>"
"<head>"
	"<title>Arduino Controller</title>"
"<meta charset='utf-8'>"
"<meta name='viewport' content='width=device-width, initial-scale=1'>"
"<style type='text/css'>"
"body {"
	"  display: flex;"
"  justify-content: center;"
"  background-color: #333;"
"  color: #fff;"
"  box-sizing: border-box;"
"  font-family: sans-serif;"
"}"
".container {"
	"  display: grid;"
"  grid-template-areas:"
"    'square1 square2 rectangle1 rectangle1'"
"    'square3 square4 rectangle2 rectangle2'"
"    'input input input input';"
"  gap: 15px;"
"  width: 100%;"
"}"
""
".square,"
".rectangle {"
	"  display: flex;"
"  align-items: center;"
"  justify-content: space-around;"
"  flex-direction: column;"
"  min-height: 50px;"
"  background-color: #555;"
"  padding: 10px;"
"  border-radius: 5px;"
"  cursor: pointer;"
"}"
".rectangle{"
	"  flex-direction: row;"
"}"
".rectangle .sq{"
	"  display: flex;"
"  align-items: center;"
"  justify-content: center;"
"  flex-direction: column;"
"}"
""
".square .svgBox,"
".rectangle .svgBox{"
	"	position: relative;"
"	width: 80%;"
"}"
".square .svgBox svg,"
".rectangle .svgBox svg{"
	"	width: 100%;"
"	height: auto;"
"  transition: 500ms;"
"}"
".square .svgBox svg.blur,"
".rectangle .svgBox svg.blur{"
	"	position: absolute;"
"	top:0;"
"	left: 0;"
"	width: 100%;"
"	height: auto;"
"}"
""
".square.active svg.blur path,"
".rectangle.active svg.blur path{"
	"	fill:orange;"
"	filter: blur(10px);"
"}"
".square.active svg path,"
".rectangle.active svg path{"
	"	fill:orange;"
"}"
".square h2,.rectangle h2{"
	"	margin: 0;"
"	text-align: center;"
"	color:#fff;"
"	font-weight: 900;"
"  transition: 500ms;"
"	user-select: none;"
"}"
".square.active h2,.rectangle.active h2{"
	"	color:orange;"
"	text-shadow: 0 0 10px orange;"
"}"
".input{"
	"  padding: 0 10px ;"
"  display: flex;"
"  align-items: center;"
"  justify-content: space-between;"
"  background-color: #555;"
"  border-radius: 5px;"
"}"
".input input{"
	"  width: 100%;"
"  font-size: 1.3em;"
"  background-color: #222;"
"  border: none;"
"  border-radius: 5px;"
"  padding: 5px;"
"  padding-left: 10px;"
"  color:#fff;"
"  user-select: none;"
"}"
".input input:focus{"
	"  border: none;"
"  outline: none;"
"}"
".input svg{"
	"   height: 50px;"
"}"
"@media (max-width: 768px) {"
	"  .container {"
	"  	width: 80vw;"
"    grid-template-areas:"
"    'square1 square3'"
"    'square2 square4'"
"    'rectangle1 rectangle2'"
"    'rectangle1 rectangle2'"
"    'input input';"
"  }"
"  .rectangle{"
"    flex-direction: column;"
"  }"
"  .sq{"
	"    margin: 20px 0;"
"  }"
"} "
"</style>"
"</head>"
"<body>"
	"<div class='container'>"
	"  <div style='grid-area: square1;' class='square' id='light1'>"
	"  	<div class='svgBox '>"
	"  		<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='-25.6 -25.6 563.20 563.20' xml:space='preserve' class='blur'><path d='M428.215,172.215c0.008-47.522-19.292-90.648-50.445-121.777C346.649,19.293,303.515-0.007,256,0 c-47.514-0.007-90.648,19.293-121.769,50.446c-31.153,31.121-50.454,74.247-50.446,121.769 c-0.008,31.786,8.673,61.634,23.754,87.181h-0.008c0.016,0.032,0.048,0.064,0.064,0.096c0.04,0.064,0.065,0.128,0.104,0.192 l0.016-0.007c10.98,19.436,26.7,34.724,38.945,48.835c6.167,7.056,11.452,13.751,15,20.014c3.572,6.295,5.382,11.908,5.502,17.53 v95.421c0.008,29.44,23.858,53.296,53.305,53.304h7.64C233.312,504.96,243.787,512,256,512c12.213,0,22.688-7.04,27.894-17.218 h7.64c29.447-0.008,53.296-23.865,53.304-53.304v-95.414v-0.008c0.12-5.622,1.93-11.236,5.502-17.53 c5.302-9.419,14.592-19.709,24.762-30.914c10.074-11.179,20.982-23.352,29.191-37.936l0.008,0.007 c0.032-0.048,0.056-0.111,0.088-0.16c0.024-0.048,0.056-0.08,0.08-0.128h-0.008C419.542,233.849,428.223,204.001,428.215,172.215z M311.828,461.771c-5.23,5.214-12.325,8.401-20.294,8.409h-71.068c-7.969-0.008-15.064-3.195-20.294-8.409 c-5.213-5.23-8.401-12.333-8.409-20.294v-5.326l120.128,25.54C311.868,461.715,311.852,461.747,311.828,461.771z M320.237,441.477 c0,1.754-0.216,3.452-0.513,5.11l-127.96-27.205v-33.524l128.473,27.316V441.477z M320.237,396.397L191.764,369.08V358.1h128.473 V396.397z M383.143,247.142l-0.104,0.169l-0.064,0.112c-8.505,15.408-22.92,29.848-36.159,44.904 c-6.607,7.576-12.918,15.361-17.867,24.034c-3.003,5.286-5.39,11.036-6.935,17.13H189.986c-1.546-6.102-3.932-11.844-6.944-17.13 c-7.432-12.982-17.867-24.081-27.893-35.246c-10.059-11.1-19.733-22.159-26.124-33.692l-0.08-0.128l-0.089-0.152 c-13.005-21.959-20.462-47.514-20.47-74.928c0.008-40.803,16.506-77.626,43.238-104.374C178.374,41.1,215.197,24.61,256,24.602 C296.804,24.61,333.627,41.1,360.375,67.84c26.732,26.748,43.23,63.571,43.238,104.374 C403.605,199.628,396.149,225.183,383.143,247.142z' fill='#fff'></path></svg>"
"  		<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='-25.6 -25.6 563.20 563.20' xml:space='preserve'><path d='M428.215,172.215c0.008-47.522-19.292-90.648-50.445-121.777C346.649,19.293,303.515-0.007,256,0 c-47.514-0.007-90.648,19.293-121.769,50.446c-31.153,31.121-50.454,74.247-50.446,121.769 c-0.008,31.786,8.673,61.634,23.754,87.181h-0.008c0.016,0.032,0.048,0.064,0.064,0.096c0.04,0.064,0.065,0.128,0.104,0.192 l0.016-0.007c10.98,19.436,26.7,34.724,38.945,48.835c6.167,7.056,11.452,13.751,15,20.014c3.572,6.295,5.382,11.908,5.502,17.53 v95.421c0.008,29.44,23.858,53.296,53.305,53.304h7.64C233.312,504.96,243.787,512,256,512c12.213,0,22.688-7.04,27.894-17.218 h7.64c29.447-0.008,53.296-23.865,53.304-53.304v-95.414v-0.008c0.12-5.622,1.93-11.236,5.502-17.53 c5.302-9.419,14.592-19.709,24.762-30.914c10.074-11.179,20.982-23.352,29.191-37.936l0.008,0.007 c0.032-0.048,0.056-0.111,0.088-0.16c0.024-0.048,0.056-0.08,0.08-0.128h-0.008C419.542,233.849,428.223,204.001,428.215,172.215z M311.828,461.771c-5.23,5.214-12.325,8.401-20.294,8.409h-71.068c-7.969-0.008-15.064-3.195-20.294-8.409 c-5.213-5.23-8.401-12.333-8.409-20.294v-5.326l120.128,25.54C311.868,461.715,311.852,461.747,311.828,461.771z M320.237,441.477 c0,1.754-0.216,3.452-0.513,5.11l-127.96-27.205v-33.524l128.473,27.316V441.477z M320.237,396.397L191.764,369.08V358.1h128.473 V396.397z M383.143,247.142l-0.104,0.169l-0.064,0.112c-8.505,15.408-22.92,29.848-36.159,44.904 c-6.607,7.576-12.918,15.361-17.867,24.034c-3.003,5.286-5.39,11.036-6.935,17.13H189.986c-1.546-6.102-3.932-11.844-6.944-17.13 c-7.432-12.982-17.867-24.081-27.893-35.246c-10.059-11.1-19.733-22.159-26.124-33.692l-0.08-0.128l-0.089-0.152 c-13.005-21.959-20.462-47.514-20.47-74.928c0.008-40.803,16.506-77.626,43.238-104.374C178.374,41.1,215.197,24.61,256,24.602 C296.804,24.61,333.627,41.1,360.375,67.84c26.732,26.748,43.23,63.571,43.238,104.374 C403.605,199.628,396.149,225.183,383.143,247.142z' fill='#fff'></path></svg>"
"	  </div>"
"	  <h2>Light1</h2>"
"  </div>"
"  <div style='grid-area: square2;' class='square' id='light2'>"
	"  	<div class='svgBox '>"
	"  		<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='-25.6 -25.6 563.20 563.20' xml:space='preserve' class='blur'><path d='M428.215,172.215c0.008-47.522-19.292-90.648-50.445-121.777C346.649,19.293,303.515-0.007,256,0 c-47.514-0.007-90.648,19.293-121.769,50.446c-31.153,31.121-50.454,74.247-50.446,121.769 c-0.008,31.786,8.673,61.634,23.754,87.181h-0.008c0.016,0.032,0.048,0.064,0.064,0.096c0.04,0.064,0.065,0.128,0.104,0.192 l0.016-0.007c10.98,19.436,26.7,34.724,38.945,48.835c6.167,7.056,11.452,13.751,15,20.014c3.572,6.295,5.382,11.908,5.502,17.53 v95.421c0.008,29.44,23.858,53.296,53.305,53.304h7.64C233.312,504.96,243.787,512,256,512c12.213,0,22.688-7.04,27.894-17.218 h7.64c29.447-0.008,53.296-23.865,53.304-53.304v-95.414v-0.008c0.12-5.622,1.93-11.236,5.502-17.53 c5.302-9.419,14.592-19.709,24.762-30.914c10.074-11.179,20.982-23.352,29.191-37.936l0.008,0.007 c0.032-0.048,0.056-0.111,0.088-0.16c0.024-0.048,0.056-0.08,0.08-0.128h-0.008C419.542,233.849,428.223,204.001,428.215,172.215z M311.828,461.771c-5.23,5.214-12.325,8.401-20.294,8.409h-71.068c-7.969-0.008-15.064-3.195-20.294-8.409 c-5.213-5.23-8.401-12.333-8.409-20.294v-5.326l120.128,25.54C311.868,461.715,311.852,461.747,311.828,461.771z M320.237,441.477 c0,1.754-0.216,3.452-0.513,5.11l-127.96-27.205v-33.524l128.473,27.316V441.477z M320.237,396.397L191.764,369.08V358.1h128.473 V396.397z M383.143,247.142l-0.104,0.169l-0.064,0.112c-8.505,15.408-22.92,29.848-36.159,44.904 c-6.607,7.576-12.918,15.361-17.867,24.034c-3.003,5.286-5.39,11.036-6.935,17.13H189.986c-1.546-6.102-3.932-11.844-6.944-17.13 c-7.432-12.982-17.867-24.081-27.893-35.246c-10.059-11.1-19.733-22.159-26.124-33.692l-0.08-0.128l-0.089-0.152 c-13.005-21.959-20.462-47.514-20.47-74.928c0.008-40.803,16.506-77.626,43.238-104.374C178.374,41.1,215.197,24.61,256,24.602 C296.804,24.61,333.627,41.1,360.375,67.84c26.732,26.748,43.23,63.571,43.238,104.374 C403.605,199.628,396.149,225.183,383.143,247.142z' fill='#fff'></path></svg>"
"  		<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='-25.6 -25.6 563.20 563.20' xml:space='preserve'><path d='M428.215,172.215c0.008-47.522-19.292-90.648-50.445-121.777C346.649,19.293,303.515-0.007,256,0 c-47.514-0.007-90.648,19.293-121.769,50.446c-31.153,31.121-50.454,74.247-50.446,121.769 c-0.008,31.786,8.673,61.634,23.754,87.181h-0.008c0.016,0.032,0.048,0.064,0.064,0.096c0.04,0.064,0.065,0.128,0.104,0.192 l0.016-0.007c10.98,19.436,26.7,34.724,38.945,48.835c6.167,7.056,11.452,13.751,15,20.014c3.572,6.295,5.382,11.908,5.502,17.53 v95.421c0.008,29.44,23.858,53.296,53.305,53.304h7.64C233.312,504.96,243.787,512,256,512c12.213,0,22.688-7.04,27.894-17.218 h7.64c29.447-0.008,53.296-23.865,53.304-53.304v-95.414v-0.008c0.12-5.622,1.93-11.236,5.502-17.53 c5.302-9.419,14.592-19.709,24.762-30.914c10.074-11.179,20.982-23.352,29.191-37.936l0.008,0.007 c0.032-0.048,0.056-0.111,0.088-0.16c0.024-0.048,0.056-0.08,0.08-0.128h-0.008C419.542,233.849,428.223,204.001,428.215,172.215z M311.828,461.771c-5.23,5.214-12.325,8.401-20.294,8.409h-71.068c-7.969-0.008-15.064-3.195-20.294-8.409 c-5.213-5.23-8.401-12.333-8.409-20.294v-5.326l120.128,25.54C311.868,461.715,311.852,461.747,311.828,461.771z M320.237,441.477 c0,1.754-0.216,3.452-0.513,5.11l-127.96-27.205v-33.524l128.473,27.316V441.477z M320.237,396.397L191.764,369.08V358.1h128.473 V396.397z M383.143,247.142l-0.104,0.169l-0.064,0.112c-8.505,15.408-22.92,29.848-36.159,44.904 c-6.607,7.576-12.918,15.361-17.867,24.034c-3.003,5.286-5.39,11.036-6.935,17.13H189.986c-1.546-6.102-3.932-11.844-6.944-17.13 c-7.432-12.982-17.867-24.081-27.893-35.246c-10.059-11.1-19.733-22.159-26.124-33.692l-0.08-0.128l-0.089-0.152 c-13.005-21.959-20.462-47.514-20.47-74.928c0.008-40.803,16.506-77.626,43.238-104.374C178.374,41.1,215.197,24.61,256,24.602 C296.804,24.61,333.627,41.1,360.375,67.84c26.732,26.748,43.23,63.571,43.238,104.374 C403.605,199.628,396.149,225.183,383.143,247.142z' fill='#fff'></path></svg>"
"	  </div>"
"	  <h2>Light2</h2>"
"  </div>"
"  <div style='grid-area: rectangle1;' class='rectangle' id='light3'>"
	"  	<div class='sq'>"
	"      <div class='svgBox '>"
	"      <svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='-25.6 -25.6 563.20 563.20' xml:space='preserve' class='blur'><path d='M428.215,172.215c0.008-47.522-19.292-90.648-50.445-121.777C346.649,19.293,303.515-0.007,256,0 c-47.514-0.007-90.648,19.293-121.769,50.446c-31.153,31.121-50.454,74.247-50.446,121.769 c-0.008,31.786,8.673,61.634,23.754,87.181h-0.008c0.016,0.032,0.048,0.064,0.064,0.096c0.04,0.064,0.065,0.128,0.104,0.192 l0.016-0.007c10.98,19.436,26.7,34.724,38.945,48.835c6.167,7.056,11.452,13.751,15,20.014c3.572,6.295,5.382,11.908,5.502,17.53 v95.421c0.008,29.44,23.858,53.296,53.305,53.304h7.64C233.312,504.96,243.787,512,256,512c12.213,0,22.688-7.04,27.894-17.218 h7.64c29.447-0.008,53.296-23.865,53.304-53.304v-95.414v-0.008c0.12-5.622,1.93-11.236,5.502-17.53 c5.302-9.419,14.592-19.709,24.762-30.914c10.074-11.179,20.982-23.352,29.191-37.936l0.008,0.007 c0.032-0.048,0.056-0.111,0.088-0.16c0.024-0.048,0.056-0.08,0.08-0.128h-0.008C419.542,233.849,428.223,204.001,428.215,172.215z M311.828,461.771c-5.23,5.214-12.325,8.401-20.294,8.409h-71.068c-7.969-0.008-15.064-3.195-20.294-8.409 c-5.213-5.23-8.401-12.333-8.409-20.294v-5.326l120.128,25.54C311.868,461.715,311.852,461.747,311.828,461.771z M320.237,441.477 c0,1.754-0.216,3.452-0.513,5.11l-127.96-27.205v-33.524l128.473,27.316V441.477z M320.237,396.397L191.764,369.08V358.1h128.473 V396.397z M383.143,247.142l-0.104,0.169l-0.064,0.112c-8.505,15.408-22.92,29.848-36.159,44.904 c-6.607,7.576-12.918,15.361-17.867,24.034c-3.003,5.286-5.39,11.036-6.935,17.13H189.986c-1.546-6.102-3.932-11.844-6.944-17.13 c-7.432-12.982-17.867-24.081-27.893-35.246c-10.059-11.1-19.733-22.159-26.124-33.692l-0.08-0.128l-0.089-0.152 c-13.005-21.959-20.462-47.514-20.47-74.928c0.008-40.803,16.506-77.626,43.238-104.374C178.374,41.1,215.197,24.61,256,24.602 C296.804,24.61,333.627,41.1,360.375,67.84c26.732,26.748,43.23,63.571,43.238,104.374 C403.605,199.628,396.149,225.183,383.143,247.142z' fill='#fff'></path></svg>"
"      <svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='-25.6 -25.6 563.20 563.20' xml:space='preserve'><path d='M428.215,172.215c0.008-47.522-19.292-90.648-50.445-121.777C346.649,19.293,303.515-0.007,256,0 c-47.514-0.007-90.648,19.293-121.769,50.446c-31.153,31.121-50.454,74.247-50.446,121.769 c-0.008,31.786,8.673,61.634,23.754,87.181h-0.008c0.016,0.032,0.048,0.064,0.064,0.096c0.04,0.064,0.065,0.128,0.104,0.192 l0.016-0.007c10.98,19.436,26.7,34.724,38.945,48.835c6.167,7.056,11.452,13.751,15,20.014c3.572,6.295,5.382,11.908,5.502,17.53 v95.421c0.008,29.44,23.858,53.296,53.305,53.304h7.64C233.312,504.96,243.787,512,256,512c12.213,0,22.688-7.04,27.894-17.218 h7.64c29.447-0.008,53.296-23.865,53.304-53.304v-95.414v-0.008c0.12-5.622,1.93-11.236,5.502-17.53 c5.302-9.419,14.592-19.709,24.762-30.914c10.074-11.179,20.982-23.352,29.191-37.936l0.008,0.007 c0.032-0.048,0.056-0.111,0.088-0.16c0.024-0.048,0.056-0.08,0.08-0.128h-0.008C419.542,233.849,428.223,204.001,428.215,172.215z M311.828,461.771c-5.23,5.214-12.325,8.401-20.294,8.409h-71.068c-7.969-0.008-15.064-3.195-20.294-8.409 c-5.213-5.23-8.401-12.333-8.409-20.294v-5.326l120.128,25.54C311.868,461.715,311.852,461.747,311.828,461.771z M320.237,441.477 c0,1.754-0.216,3.452-0.513,5.11l-127.96-27.205v-33.524l128.473,27.316V441.477z M320.237,396.397L191.764,369.08V358.1h128.473 V396.397z M383.143,247.142l-0.104,0.169l-0.064,0.112c-8.505,15.408-22.92,29.848-36.159,44.904 c-6.607,7.576-12.918,15.361-17.867,24.034c-3.003,5.286-5.39,11.036-6.935,17.13H189.986c-1.546-6.102-3.932-11.844-6.944-17.13 c-7.432-12.982-17.867-24.081-27.893-35.246c-10.059-11.1-19.733-22.159-26.124-33.692l-0.08-0.128l-0.089-0.152 c-13.005-21.959-20.462-47.514-20.47-74.928c0.008-40.803,16.506-77.626,43.238-104.374C178.374,41.1,215.197,24.61,256,24.602 C296.804,24.61,333.627,41.1,360.375,67.84c26.732,26.748,43.23,63.571,43.238,104.374 C403.605,199.628,396.149,225.183,383.143,247.142z' fill='#fff'></path></svg>"
"    </div>"
"    <h2>Light3</h2>"
"    </div>"
"    <div class='sq'>"
	"      <div class='svgBox '>"
	"      <svg xmlns='http://www.w3.org/2000/svg' class='blur' viewBox='0 0 50 50'><path d='M 24.90625 3.96875 C 24.863281 3.976563 24.820313 3.988281 24.78125 4 C 24.316406 4.105469 23.988281 4.523438 24 5 L 24 11 C 23.996094 11.359375 24.183594 11.695313 24.496094 11.878906 C 24.808594 12.058594 25.191406 12.058594 25.503906 11.878906 C 25.816406 11.695313 26.003906 11.359375 26 11 L 26 5 C 26.011719 4.710938 25.894531 4.433594 25.6875 4.238281 C 25.476563 4.039063 25.191406 3.941406 24.90625 3.96875 Z M 10.65625 9.84375 C 10.28125 9.910156 9.980469 10.183594 9.875 10.546875 C 9.769531 10.914063 9.878906 11.304688 10.15625 11.5625 L 14.40625 15.8125 C 14.648438 16.109375 15.035156 16.246094 15.410156 16.160156 C 15.78125 16.074219 16.074219 15.78125 16.160156 15.410156 C 16.246094 15.035156 16.109375 14.648438 15.8125 14.40625 L 11.5625 10.15625 C 11.355469 9.933594 11.054688 9.820313 10.75 9.84375 C 10.71875 9.84375 10.6875 9.84375 10.65625 9.84375 Z M 39.03125 9.84375 C 38.804688 9.875 38.59375 9.988281 38.4375 10.15625 L 34.1875 14.40625 C 33.890625 14.648438 33.753906 15.035156 33.839844 15.410156 C 33.925781 15.78125 34.21875 16.074219 34.589844 16.160156 C 34.964844 16.246094 35.351563 16.109375 35.59375 15.8125 L 39.84375 11.5625 C 40.15625 11.265625 40.246094 10.800781 40.0625 10.410156 C 39.875 10.015625 39.460938 9.789063 39.03125 9.84375 Z M 24.90625 15 C 24.875 15.007813 24.84375 15.019531 24.8125 15.03125 C 24.75 15.035156 24.6875 15.046875 24.625 15.0625 C 24.613281 15.074219 24.605469 15.082031 24.59375 15.09375 C 19.289063 15.320313 15 19.640625 15 25 C 15 30.503906 19.496094 35 25 35 C 30.503906 35 35 30.503906 35 25 C 35 19.660156 30.746094 15.355469 25.46875 15.09375 C 25.433594 15.09375 25.410156 15.0625 25.375 15.0625 C 25.273438 15.023438 25.167969 15.003906 25.0625 15 C 25.042969 15 25.019531 15 25 15 C 24.96875 15 24.9375 15 24.90625 15 Z M 24.9375 17 C 24.957031 17 24.980469 17 25 17 C 25.03125 17 25.0625 17 25.09375 17 C 29.46875 17.050781 33 20.613281 33 25 C 33 29.421875 29.421875 33 25 33 C 20.582031 33 17 29.421875 17 25 C 17 20.601563 20.546875 17.035156 24.9375 17 Z M 4.71875 24 C 4.167969 24.078125 3.78125 24.589844 3.859375 25.140625 C 3.9375 25.691406 4.449219 26.078125 5 26 L 11 26 C 11.359375 26.003906 11.695313 25.816406 11.878906 25.503906 C 12.058594 25.191406 12.058594 24.808594 11.878906 24.496094 C 11.695313 24.183594 11.359375 23.996094 11 24 L 5 24 C 4.96875 24 4.9375 24 4.90625 24 C 4.875 24 4.84375 24 4.8125 24 C 4.78125 24 4.75 24 4.71875 24 Z M 38.71875 24 C 38.167969 24.078125 37.78125 24.589844 37.859375 25.140625 C 37.9375 25.691406 38.449219 26.078125 39 26 L 45 26 C 45.359375 26.003906 45.695313 25.816406 45.878906 25.503906 C 46.058594 25.191406 46.058594 24.808594 45.878906 24.496094 C 45.695313 24.183594 45.359375 23.996094 45 24 L 39 24 C 38.96875 24 38.9375 24 38.90625 24 C 38.875 24 38.84375 24 38.8125 24 C 38.78125 24 38.75 24 38.71875 24 Z M 15 33.875 C 14.773438 33.90625 14.5625 34.019531 14.40625 34.1875 L 10.15625 38.4375 C 9.859375 38.679688 9.722656 39.066406 9.808594 39.441406 C 9.894531 39.8125 10.1875 40.105469 10.558594 40.191406 C 10.933594 40.277344 11.320313 40.140625 11.5625 39.84375 L 15.8125 35.59375 C 16.109375 35.308594 16.199219 34.867188 16.039063 34.488281 C 15.882813 34.109375 15.503906 33.867188 15.09375 33.875 C 15.0625 33.875 15.03125 33.875 15 33.875 Z M 34.6875 33.875 C 34.3125 33.941406 34.011719 34.214844 33.90625 34.578125 C 33.800781 34.945313 33.910156 35.335938 34.1875 35.59375 L 38.4375 39.84375 C 38.679688 40.140625 39.066406 40.277344 39.441406 40.191406 C 39.8125 40.105469 40.105469 39.8125 40.191406 39.441406 C 40.277344 39.066406 40.140625 38.679688 39.84375 38.4375 L 35.59375 34.1875 C 35.40625 33.988281 35.148438 33.878906 34.875 33.875 C 34.84375 33.875 34.8125 33.875 34.78125 33.875 C 34.75 33.875 34.71875 33.875 34.6875 33.875 Z M 24.90625 37.96875 C 24.863281 37.976563 24.820313 37.988281 24.78125 38 C 24.316406 38.105469 23.988281 38.523438 24 39 L 24 45 C 23.996094 45.359375 24.183594 45.695313 24.496094 45.878906 C 24.808594 46.058594 25.191406 46.058594 25.503906 45.878906 C 25.816406 45.695313 26.003906 45.359375 26 45 L 26 39 C 26.011719 38.710938 25.894531 38.433594 25.6875 38.238281 C 25.476563 38.039063 25.191406 37.941406 24.90625 37.96875 Z' fill='#fff'/></svg>"
"      <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 50'><path d='M 24.90625 3.96875 C 24.863281 3.976563 24.820313 3.988281 24.78125 4 C 24.316406 4.105469 23.988281 4.523438 24 5 L 24 11 C 23.996094 11.359375 24.183594 11.695313 24.496094 11.878906 C 24.808594 12.058594 25.191406 12.058594 25.503906 11.878906 C 25.816406 11.695313 26.003906 11.359375 26 11 L 26 5 C 26.011719 4.710938 25.894531 4.433594 25.6875 4.238281 C 25.476563 4.039063 25.191406 3.941406 24.90625 3.96875 Z M 10.65625 9.84375 C 10.28125 9.910156 9.980469 10.183594 9.875 10.546875 C 9.769531 10.914063 9.878906 11.304688 10.15625 11.5625 L 14.40625 15.8125 C 14.648438 16.109375 15.035156 16.246094 15.410156 16.160156 C 15.78125 16.074219 16.074219 15.78125 16.160156 15.410156 C 16.246094 15.035156 16.109375 14.648438 15.8125 14.40625 L 11.5625 10.15625 C 11.355469 9.933594 11.054688 9.820313 10.75 9.84375 C 10.71875 9.84375 10.6875 9.84375 10.65625 9.84375 Z M 39.03125 9.84375 C 38.804688 9.875 38.59375 9.988281 38.4375 10.15625 L 34.1875 14.40625 C 33.890625 14.648438 33.753906 15.035156 33.839844 15.410156 C 33.925781 15.78125 34.21875 16.074219 34.589844 16.160156 C 34.964844 16.246094 35.351563 16.109375 35.59375 15.8125 L 39.84375 11.5625 C 40.15625 11.265625 40.246094 10.800781 40.0625 10.410156 C 39.875 10.015625 39.460938 9.789063 39.03125 9.84375 Z M 24.90625 15 C 24.875 15.007813 24.84375 15.019531 24.8125 15.03125 C 24.75 15.035156 24.6875 15.046875 24.625 15.0625 C 24.613281 15.074219 24.605469 15.082031 24.59375 15.09375 C 19.289063 15.320313 15 19.640625 15 25 C 15 30.503906 19.496094 35 25 35 C 30.503906 35 35 30.503906 35 25 C 35 19.660156 30.746094 15.355469 25.46875 15.09375 C 25.433594 15.09375 25.410156 15.0625 25.375 15.0625 C 25.273438 15.023438 25.167969 15.003906 25.0625 15 C 25.042969 15 25.019531 15 25 15 C 24.96875 15 24.9375 15 24.90625 15 Z M 24.9375 17 C 24.957031 17 24.980469 17 25 17 C 25.03125 17 25.0625 17 25.09375 17 C 29.46875 17.050781 33 20.613281 33 25 C 33 29.421875 29.421875 33 25 33 C 20.582031 33 17 29.421875 17 25 C 17 20.601563 20.546875 17.035156 24.9375 17 Z M 4.71875 24 C 4.167969 24.078125 3.78125 24.589844 3.859375 25.140625 C 3.9375 25.691406 4.449219 26.078125 5 26 L 11 26 C 11.359375 26.003906 11.695313 25.816406 11.878906 25.503906 C 12.058594 25.191406 12.058594 24.808594 11.878906 24.496094 C 11.695313 24.183594 11.359375 23.996094 11 24 L 5 24 C 4.96875 24 4.9375 24 4.90625 24 C 4.875 24 4.84375 24 4.8125 24 C 4.78125 24 4.75 24 4.71875 24 Z M 38.71875 24 C 38.167969 24.078125 37.78125 24.589844 37.859375 25.140625 C 37.9375 25.691406 38.449219 26.078125 39 26 L 45 26 C 45.359375 26.003906 45.695313 25.816406 45.878906 25.503906 C 46.058594 25.191406 46.058594 24.808594 45.878906 24.496094 C 45.695313 24.183594 45.359375 23.996094 45 24 L 39 24 C 38.96875 24 38.9375 24 38.90625 24 C 38.875 24 38.84375 24 38.8125 24 C 38.78125 24 38.75 24 38.71875 24 Z M 15 33.875 C 14.773438 33.90625 14.5625 34.019531 14.40625 34.1875 L 10.15625 38.4375 C 9.859375 38.679688 9.722656 39.066406 9.808594 39.441406 C 9.894531 39.8125 10.1875 40.105469 10.558594 40.191406 C 10.933594 40.277344 11.320313 40.140625 11.5625 39.84375 L 15.8125 35.59375 C 16.109375 35.308594 16.199219 34.867188 16.039063 34.488281 C 15.882813 34.109375 15.503906 33.867188 15.09375 33.875 C 15.0625 33.875 15.03125 33.875 15 33.875 Z M 34.6875 33.875 C 34.3125 33.941406 34.011719 34.214844 33.90625 34.578125 C 33.800781 34.945313 33.910156 35.335938 34.1875 35.59375 L 38.4375 39.84375 C 38.679688 40.140625 39.066406 40.277344 39.441406 40.191406 C 39.8125 40.105469 40.105469 39.8125 40.191406 39.441406 C 40.277344 39.066406 40.140625 38.679688 39.84375 38.4375 L 35.59375 34.1875 C 35.40625 33.988281 35.148438 33.878906 34.875 33.875 C 34.84375 33.875 34.8125 33.875 34.78125 33.875 C 34.75 33.875 34.71875 33.875 34.6875 33.875 Z M 24.90625 37.96875 C 24.863281 37.976563 24.820313 37.988281 24.78125 38 C 24.316406 38.105469 23.988281 38.523438 24 39 L 24 45 C 23.996094 45.359375 24.183594 45.695313 24.496094 45.878906 C 24.808594 46.058594 25.191406 46.058594 25.503906 45.878906 C 25.816406 45.695313 26.003906 45.359375 26 45 L 26 39 C 26.011719 38.710938 25.894531 38.433594 25.6875 38.238281 C 25.476563 38.039063 25.191406 37.941406 24.90625 37.96875 Z' fill='#fff'/></svg>"
"    </div>"
"    <h2 id='brightness'>Brightness</h2>"
"    </div>"
"  </div>"
"  <div style='grid-area: square3;' class='square' id='door1'>"
	"  	<div class='svgBox '>"
	"      <svg xmlns='http://www.w3.org/2000/svg' viewBox='-2.5 -2.5 55 55' class='blur'><path d='M 6.8125 0 C 6.335938 0.0898438 5.992188 0.511719 6 1 L 6 49 C 6 49.550781 6.449219 50 7 50 L 43 50 C 43.550781 50 44 49.550781 44 49 L 44 1 C 44 0.449219 43.550781 0 43 0 L 7 0 C 6.96875 0 6.9375 0 6.90625 0 C 6.875 0 6.84375 0 6.8125 0 Z M 8 2 L 42 2 L 42 48 L 40 48 L 40 5 C 40 4.449219 39.550781 4 39 4 L 11 4 C 10.96875 4 10.9375 4 10.90625 4 C 10.390625 4.046875 9.996094 4.480469 10 5 L 10 48 L 8 48 Z M 12 6 L 38 6 L 38 48 L 12 48 Z M 32 24 C 30.894531 24 30 24.894531 30 26 C 30 27.105469 30.894531 28 32 28 C 33.105469 28 34 27.105469 34 26 C 34 24.894531 33.105469 24 32 24 Z' fill='#fff'/></svg>"
"      <svg xmlns='http://www.w3.org/2000/svg' viewBox='-2.5 -2.5 55 55'><path d='M 6.8125 0 C 6.335938 0.0898438 5.992188 0.511719 6 1 L 6 49 C 6 49.550781 6.449219 50 7 50 L 43 50 C 43.550781 50 44 49.550781 44 49 L 44 1 C 44 0.449219 43.550781 0 43 0 L 7 0 C 6.96875 0 6.9375 0 6.90625 0 C 6.875 0 6.84375 0 6.8125 0 Z M 8 2 L 42 2 L 42 48 L 40 48 L 40 5 C 40 4.449219 39.550781 4 39 4 L 11 4 C 10.96875 4 10.9375 4 10.90625 4 C 10.390625 4.046875 9.996094 4.480469 10 5 L 10 48 L 8 48 Z M 12 6 L 38 6 L 38 48 L 12 48 Z M 32 24 C 30.894531 24 30 24.894531 30 26 C 30 27.105469 30.894531 28 32 28 C 33.105469 28 34 27.105469 34 26 C 34 24.894531 33.105469 24 32 24 Z' fill='#fff'/></svg>"
"    </div>"
"    <h2>Door1</h2>"
"  </div>"
"  <div style='grid-area: square4;' class='square' id='door2'>"
"      <div class='svgBox '>"
	"      <svg xmlns='http://www.w3.org/2000/svg' viewBox='-2.5 -2.5 55 55' class='blur'><path d='M 6.8125 0 C 6.335938 0.0898438 5.992188 0.511719 6 1 L 6 49 C 6 49.550781 6.449219 50 7 50 L 43 50 C 43.550781 50 44 49.550781 44 49 L 44 1 C 44 0.449219 43.550781 0 43 0 L 7 0 C 6.96875 0 6.9375 0 6.90625 0 C 6.875 0 6.84375 0 6.8125 0 Z M 8 2 L 42 2 L 42 48 L 40 48 L 40 5 C 40 4.449219 39.550781 4 39 4 L 11 4 C 10.96875 4 10.9375 4 10.90625 4 C 10.390625 4.046875 9.996094 4.480469 10 5 L 10 48 L 8 48 Z M 12 6 L 38 6 L 38 48 L 12 48 Z M 32 24 C 30.894531 24 30 24.894531 30 26 C 30 27.105469 30.894531 28 32 28 C 33.105469 28 34 27.105469 34 26 C 34 24.894531 33.105469 24 32 24 Z' fill='#fff'/></svg>"
"        <svg xmlns='http://www.w3.org/2000/svg' viewBox='-2.5 -2.5 55 55'><path d='M 6.8125 0 C 6.335938 0.0898438 5.992188 0.511719 6 1 L 6 49 C 6 49.550781 6.449219 50 7 50 L 43 50 C 43.550781 50 44 49.550781 44 49 L 44 1 C 44 0.449219 43.550781 0 43 0 L 7 0 C 6.96875 0 6.9375 0 6.90625 0 C 6.875 0 6.84375 0 6.8125 0 Z M 8 2 L 42 2 L 42 48 L 40 48 L 40 5 C 40 4.449219 39.550781 4 39 4 L 11 4 C 10.96875 4 10.9375 4 10.90625 4 C 10.390625 4.046875 9.996094 4.480469 10 5 L 10 48 L 8 48 Z M 12 6 L 38 6 L 38 48 L 12 48 Z M 32 24 C 30.894531 24 30 24.894531 30 26 C 30 27.105469 30.894531 28 32 28 C 33.105469 28 34 27.105469 34 26 C 34 24.894531 33.105469 24 32 24 Z' fill='#fff'/></svg>"
"    </div>"
"    <h2>door2</h2>"
"  </div>"
"  <div style='grid-area: rectangle2;' class='rectangle' id='window'>"
	"  	<div class='sq'>"
	"  	<div class='svgBox '>"
	"       <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' class='blur'><path d='M 78.5 50 C 67.5 50 59 59 59 70 L 59 370 L 48.5 370 C 37.5 370 29 379.40039 29 390.40039 L 29 442 C 29 453 37.5 462 48.5 462 L 463.40039 462 C 474.40039 462 482.90039 453 482.90039 442 L 482.90039 390.40039 C 483.00039 379.40039 474.5 370 463.5 370 L 453 370 L 453 70 C 453 59 444.5 50 433.5 50 L 78.5 50 z M 79 70 L 433 70 L 433 370 L 79 370 L 79 70 z M 109 90 A 10.029 10.029 0 0 0 99 100 L 99 341 A 10.029 10.029 0 0 0 109 351 L 404 351 A 10.029 10.029 0 0 0 414 341 L 414 100 A 10.029 10.029 0 0 0 404 90 L 109 90 z M 119 110 L 246 110 L 246 209 L 119 209 L 119 110 z M 266 110 L 393 110 L 393 209 L 266 209 L 266 110 z M 119 229 L 246 229 L 246 331 L 119 331 L 119 229 z M 266 229 L 393 229 L 393 331 L 266 331 L 266 229 z M 49 390 L 463.5 390 L 463.5 442 L 49 442 L 49 390 z' fill='#fff'/></svg>"
  "       <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path d='M 78.5 50 C 67.5 50 59 59 59 70 L 59 370 L 48.5 370 C 37.5 370 29 379.40039 29 390.40039 L 29 442 C 29 453 37.5 462 48.5 462 L 463.40039 462 C 474.40039 462 482.90039 453 482.90039 442 L 482.90039 390.40039 C 483.00039 379.40039 474.5 370 463.5 370 L 453 370 L 453 70 C 453 59 444.5 50 433.5 50 L 78.5 50 z M 79 70 L 433 70 L 433 370 L 79 370 L 79 70 z M 109 90 A 10.029 10.029 0 0 0 99 100 L 99 341 A 10.029 10.029 0 0 0 109 351 L 404 351 A 10.029 10.029 0 0 0 414 341 L 414 100 A 10.029 10.029 0 0 0 404 90 L 109 90 z M 119 110 L 246 110 L 246 209 L 119 209 L 119 110 z M 266 110 L 393 110 L 393 209 L 266 209 L 266 110 z M 119 229 L 246 229 L 246 331 L 119 331 L 119 229 z M 266 229 L 393 229 L 393 331 L 266 331 L 266 229 z M 49 390 L 463.5 390 L 463.5 442 L 49 442 L 49 390 z' fill='#fff'/></svg>"
"    </div>"
"    <h2>window</h2>"
"    </div>"
"    <div class='sq'>"
	"      <div class='svgBox '>"
	"      <svg xmlns='http://www.w3.org/2000/svg' viewBox='-2.5 -2.5 55 55' class='blur'><path d='M 24.90625 0.15625 C 24.863281 0.164063 24.820313 0.175781 24.78125 0.1875 C 24.558594 0.234375 24.363281 0.355469 24.21875 0.53125 C 24.21875 0.53125 20.03125 5.621094 15.84375 12.09375 C 11.65625 18.566406 7.375 26.335938 7.375 32.375 C 7.375 42.09375 15.28125 50 25 50 C 34.71875 50 42.625 42.09375 42.625 32.375 C 42.625 26.335938 38.34375 18.566406 34.15625 12.09375 C 29.96875 5.621094 25.78125 0.53125 25.78125 0.53125 C 25.570313 0.265625 25.242188 0.125 24.90625 0.15625 Z M 25 2.8125 C 25.980469 4.027344 28.976563 7.757813 32.46875 13.15625 C 36.585938 19.519531 40.625 27.335938 40.625 32.375 C 40.625 41.011719 33.636719 48 25 48 C 16.363281 48 9.375 41.011719 9.375 32.375 C 9.375 27.335938 13.414063 19.519531 17.53125 13.15625 C 21.023438 7.757813 24.019531 4.027344 25 2.8125 Z M 24.25 11.125 C 23.996094 11.175781 23.773438 11.320313 23.625 11.53125 C 23.625 11.53125 21.171875 14.6875 18.71875 18.8125 C 16.265625 22.9375 13.75 27.96875 13.75 32.1875 C 13.75 37.484375 16.242188 40.691406 18.71875 42.40625 C 21.195313 44.121094 23.6875 44.46875 23.6875 44.46875 C 24.054688 44.558594 24.4375 44.433594 24.683594 44.148438 C 24.929688 43.863281 24.992188 43.460938 24.847656 43.113281 C 24.703125 42.765625 24.375 42.527344 24 42.5 C 24 42.5 21.945313 42.214844 19.875 40.78125 C 17.804688 39.347656 15.75 36.878906 15.75 32.1875 C 15.75 28.816406 18.054688 23.820313 20.4375 19.8125 C 22.820313 15.804688 25.1875 12.75 25.1875 12.75 C 25.453125 12.429688 25.492188 11.972656 25.285156 11.609375 C 25.074219 11.25 24.664063 11.054688 24.25 11.125 Z' fill='#fff'/></svg>"
"      <svg xmlns='http://www.w3.org/2000/svg' viewBox='-2.5 -2.5 55 55'><path d='M 24.90625 0.15625 C 24.863281 0.164063 24.820313 0.175781 24.78125 0.1875 C 24.558594 0.234375 24.363281 0.355469 24.21875 0.53125 C 24.21875 0.53125 20.03125 5.621094 15.84375 12.09375 C 11.65625 18.566406 7.375 26.335938 7.375 32.375 C 7.375 42.09375 15.28125 50 25 50 C 34.71875 50 42.625 42.09375 42.625 32.375 C 42.625 26.335938 38.34375 18.566406 34.15625 12.09375 C 29.96875 5.621094 25.78125 0.53125 25.78125 0.53125 C 25.570313 0.265625 25.242188 0.125 24.90625 0.15625 Z M 25 2.8125 C 25.980469 4.027344 28.976563 7.757813 32.46875 13.15625 C 36.585938 19.519531 40.625 27.335938 40.625 32.375 C 40.625 41.011719 33.636719 48 25 48 C 16.363281 48 9.375 41.011719 9.375 32.375 C 9.375 27.335938 13.414063 19.519531 17.53125 13.15625 C 21.023438 7.757813 24.019531 4.027344 25 2.8125 Z M 24.25 11.125 C 23.996094 11.175781 23.773438 11.320313 23.625 11.53125 C 23.625 11.53125 21.171875 14.6875 18.71875 18.8125 C 16.265625 22.9375 13.75 27.96875 13.75 32.1875 C 13.75 37.484375 16.242188 40.691406 18.71875 42.40625 C 21.195313 44.121094 23.6875 44.46875 23.6875 44.46875 C 24.054688 44.558594 24.4375 44.433594 24.683594 44.148438 C 24.929688 43.863281 24.992188 43.460938 24.847656 43.113281 C 24.703125 42.765625 24.375 42.527344 24 42.5 C 24 42.5 21.945313 42.214844 19.875 40.78125 C 17.804688 39.347656 15.75 36.878906 15.75 32.1875 C 15.75 28.816406 18.054688 23.820313 20.4375 19.8125 C 22.820313 15.804688 25.1875 12.75 25.1875 12.75 C 25.453125 12.429688 25.492188 11.972656 25.285156 11.609375 C 25.074219 11.25 24.664063 11.054688 24.25 11.125 Z' fill='#fff'/></svg>"
"    </div>"
"    <h2 id='humidity'>Humidity</h2>"
"    </div>"
"  </div>"
"  <div style='grid-area:input' class='input'>"
	"    <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'>"
	"      <path fill='#212121' d='M38,5H10C7.8,5,6,6.8,6,9v29c0,2.2,1.8,4,4,4h28c2.2,0,4-1.8,4-4V9C42,6.8,40.2,5,38,5z'/>"
"      <path fill='#E0E0E0' d='M25.8,14h-3.6c-0.7,0-1.2-0.6-1.2-1.3v-2.5C21,9.6,21.5,9,22.2,9h3.6c0.7,0,1.2,0.6,1.2,1.3v2.5C27,13.4,26.5,14,25.8,14 M34.8,14c0.7,0,1.2-0.6,1.2-1.3v-2.5C36,9.6,35.5,9,34.8,9h-3.6C30.5,9,30,9.6,30,10.3v2.5c0,0.7,0.5,1.3,1.2,1.3H34.8 M16.8,14c0.7,0,1.2-0.6,1.2-1.3v-2.5C18,9.6,17.5,9,16.8,9h-3.6C12.5,9,12,9.6,12,10.3v2.5c0,0.7,0.5,1.3,1.2,1.3H16.8 M25.8,22c0.7,0,1.2-0.6,1.2-1.3v-2.5c0-0.7-0.5-1.3-1.2-1.3h-3.6c-0.7,0-1.2,0.6-1.2,1.3v2.5c0,0.7,0.5,1.3,1.2,1.3H25.8 M34.8,22c0.7,0,1.2-0.6,1.2-1.3v-2.5c0-0.7-0.5-1.3-1.2-1.3h-3.6c-0.7,0-1.2,0.6-1.2,1.3v2.5c0,0.7,0.5,1.3,1.2,1.3H34.8 M16.8,22c0.7,0,1.2-0.6,1.2-1.3v-2.5c0-0.7-0.5-1.3-1.2-1.3h-3.6c-0.7,0-1.2,0.6-1.2,1.3v2.5c0,0.7,0.5,1.3,1.2,1.3H16.8 M25.8,30c0.7,0,1.2-0.6,1.2-1.3v-2.5c0-0.7-0.5-1.3-1.2-1.3h-3.6c-0.7,0-1.2,0.6-1.2,1.3v2.5c0,0.7,0.5,1.3,1.2,1.3H25.8 M34.8,30c0.7,0,1.2-0.6,1.2-1.3v-2.5c0-0.7-0.5-1.3-1.2-1.3h-3.6c-0.7,0-1.2,0.6-1.2,1.3v2.5c0,0.7,0.5,1.3,1.2,1.3H34.8 M16.8,30c0.7,0,1.2-0.6,1.2-1.3v-2.5c0-0.7-0.5-1.3-1.2-1.3h-3.6c-0.7,0-1.2,0.6-1.2,1.3v2.5c0,0.7,0.5,1.3,1.2,1.3H16.8 M25.8,38c0.7,0,1.2-0.6,1.2-1.3v-2.5c0-0.7-0.5-1.3-1.2-1.3h-3.6c-0.7,0-1.2,0.6-1.2,1.3v2.5c0,0.7,0.5,1.3,1.2,1.3H25.8'/>"
"      <path fill='#FF5252' d='M34.8,38h-3.6c-0.7,0-1.2-0.6-1.2-1.3v-2.5c0-0.7,0.5-1.3,1.2-1.3h3.6c0.7,0,1.2,0.6,1.2,1.3v2.5C36,37.4,35.5,38,34.8,38'/>"
"      <path fill='#BDBDBD' d='M16.8,38h-3.6c-0.7,0-1.2-0.6-1.2-1.3v-2.5c0-0.7,0.5-1.3,1.2-1.3h3.6c0.7,0,1.2,0.6,1.2,1.3v2.5C18,37.4,17.5,38,16.8,38'/>"
"    </svg>"
"    <input type='text' id='input' placeholder='the code will appear here' disabled>"
"  </div>"
"</div>"
"<script>"
"window.onerror = function(message, source, lineno, colno, error) {"
"  var errorMessage = 'Error: ' + message + ' ';"
"  errorMessage += 'Source: ' + source + ' ';"
"  errorMessage += 'Line: ' + lineno + ' ';"
"  errorMessage += 'Column: ' + colno + ' ';"
"  alert(errorMessage);"
"  console.error(errorMessage);"
"  return true;"
"};"
"</script>"
"<script defer>"
"var light1 = document.getElementById('light1');"
"var light2 = document.getElementById('light2');"
"var light3 = document.getElementById('light3');"
"var theWindow = document.getElementById('window');"
"var door1 = document.getElementById('door1');"
"var door2 = document.getElementById('door2');"
"var brightness = document.getElementById('brightness');"
"var humidity = document.getElementById('humidity');"
"var input = document.getElementById('input');"
"var data = {"
"  light1:false,"
"  light2:false,"
"  light3:false,"
"  brightness:0,"
"  window:false,"
"  door1:false,"
"  door2:false,"
"  humidity:0,"
"  userInput:''"
"};"
"function updateUI(){"
"  if(data.light1)light1.classList.add('active');"
"  else light1.classList.remove('active');"
""
"  if(data.light2)light2.classList.add('active');"
"  else light2.classList.remove('active');"
""
"  if(data.light3)light3.classList.add('active');"
"  else light3.classList.remove('active');"
""
"  if(!data.window)theWindow.classList.add('active');"
"  else theWindow.classList.remove('active');"
""
"  if(!data.door1)door1.classList.add('active');"
"  else door1.classList.remove('active');"
""
"  if(!data.door2) door2.classList.add('active');"
"  else door2.classList.remove('active');"
""
"  brightness.innerHTML = 'Brightness: ' + data.brightness+'%';"
"  humidity.innerHTML = 'Humidity: ' + data.humidity+'%'; "
""
"  input.value = data.userInput;"
"}"
"light1.addEventListener('click',function(){"
"  if(data.light1)sendToArduino('lightOff1');"
"  else sendToArduino('lightOn1');"
"});"
"light2.addEventListener('click',function(){"
"  if(data.light2)sendToArduino('lightOff2');"
"  else sendToArduino('lightOn2');"
"});"
"theWindow.addEventListener('click',function(){"
"  if(data.window)sendToArduino('windowOpen');"
"  else sendToArduino('windowClose');"
"});"
"door1.addEventListener('click',function(){"
"  if(data.door1)sendToArduino('door1Open',prompt('Please type the password:'));"
"  else sendToArduino('door1Close');"
"});"
"door2.addEventListener('click',function(){"
"  if(data.door2)sendToArduino('door2Open');"
"  else sendToArduino('door2Close');"
"});"
""
"function sendToArduino(type,message,callback) {"
"  var xhr = new XMLHttpRequest();"
"  xhr.open('POST', '/send', true);"
"  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');"
"  xhr.onreadystatechange = function() {"
"    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {"
"      if(callback){callback(xhr.response);}"
"    }"
"  };"
"  xhr.send('type='+type+'&message=' + encodeURIComponent(message));"
"}"
"setInterval(function(){"
"  sendToArduino('sendMeData',null,function(res){"
"    data = JSON.parse(res);"
"     data.humidity = Math.min(100,data.humidity);"
"    updateUI();"
"  });"
"},500);"
"</script>"
"</body>"
"</html>";
/**/
String strBool(bool boolean){
  if(boolean == true){
    return "true";
  }
  return "false";
}
void handleSend(){
    String type;
    if (server.hasArg("type")) {
        type = server.arg("type"); // Store the received message
        if (type == "sendMeData") {
          String response = "{";
          response += "\"light1\": " + strBool(digitalRead(light1)) + ",";
          response += "\"light2\": " + strBool(digitalRead(light2)) + ",";
          response += "\"light3\": " + strBool(digitalRead(light3)) + ",";
          response += "\"brightness\": " + String(int((float(analogRead(A0)) / 1024) * 100)) + ",";
          response += "\"window\": " + strBool(window.atStart) + ",";
          response += "\"door1\": " + strBool(door1State) + ",";
          response += "\"door2\": " + strBool(door2.atStart) + ",";
          response += "\"humidity\": " + String(humidity) + ",";
          response += "\"userInput\": \"" + String(userInput) + "\"";
          response += "}";
          server.send(200, "text/JSON", response);
        } else if (type == "lightOn1") {
          digitalWrite(light1, HIGH); // Turn the light on
          server.send(200, "text/plain", "Light1 turned on");
        } else if (type == "lightOff1") {
          digitalWrite(light1, LOW); // Turn the light off
          server.send(200, "text/plain", "Light1 turned off");
        } else if (type == "lightOn2") {
          digitalWrite(light2, HIGH); // Turn the light on
          server.send(200, "text/plain", "Light2 turned on");
        } else if (type == "lightOff2") {
          digitalWrite(light2, LOW); // Turn the light off
          server.send(200, "text/plain", "Light2 turned off");
        }else if(type == "door1Open"){
          String message = server.arg("message");
          userInputToSend = message;
          sendUserInput = true;
        }else if(type== "door1Close"){
          userInputToSend = "***CLOSE***";
          sendUserInput = true;
        }else if(type == "door2Open"){
          //TODO edit the code so it force close the door if water is above 10%
          door2.atStart = false;
        }else if(type== "door2Close"){
          door2.atStart = true;
        }else if(type == "windowOpen"){
          window.atStart = false;
        }else if(type== "windowClose"){
        Serial.print("received close window command");
          window.atStart = true;
        } else {
          server.send(200, "text/plain", "Invalid Command");
        }
    } else {
        server.send(400, "text/plain", "Bad Request");
    }
}

void handleRoot() {
    // Send the HTML content for the main page
    server.send(200, "text/html", htmlPage);
}

void setup() {
    Serial.begin(9600);
    CommunicationSerial.begin(19200);
    WiFi.softAPConfig(customIP, gateway, subnet);
    WiFi.softAP(ssid, password);

    IPAddress myIP = WiFi.softAPIP();
    Serial.print("Hotspot IP address: ");
    Serial.println(myIP);

    server.on("/", handleRoot);
    server.on("/send", handleSend); // Handle POST requests to "/send" URL
    server.begin();

    pinMode(light1,OUTPUT);
    digitalWrite(light1,HIGH);
    pinMode(light2,OUTPUT);
    digitalWrite(light2,HIGH);
    pinMode(light3,OUTPUT);
    digitalWrite(light3,HIGH);

    window.duration = 1000;
    window.startingAngle = 0;
    window.endingAngle = 180;
    window.pin = D0;
    window.servo.attach(window.pin);
    window.servo.write(window.startingAngle);

    door2.duration = 1000;
    door2.startingAngle = 0;
    door2.endingAngle = 180;
    door2.pin = D1;
    door2.servo.attach(door2.pin);
    door2.servo.write(door2.startingAngle);

    delay(800);
}

void loop() {
  if(humidity >= 20){
    window.atStart = window.oldAtStart = true;
    window.servo.write(window.startingAngle);
  }
  unsigned long currMillis = millis();
  server.handleClient(); // Handle incoming client 
  if(sendUserInput){
    sendUserInput = false;
    if(userInputToSend == "***CLOSE***"){
      CommunicationSerial.print("door1Close:part2");
    }else{
      CommunicationSerial.print("userInputFromWebsite:"+userInputToSend+",");
    }
  }
  if (CommunicationSerial.available()>0) {
     String message = CommunicationSerial.readStringUntil(',');
     message.trim(); // Remove leading and trailing whitespaces
    int colonIndex = message.indexOf(":"); // Find the index of the colon character
    String part1 = message.substring(0, colonIndex);
    String part2 = message.substring(colonIndex + 1);
    //Serial.println(part1+" "+part2);
    if(part1 == "door1"){
      if(part2=="1")door1State = true;
      else door1State = false;
    }else if(part1 == "userInput"){
      userInput = part2;
    }else if(part1 == "humidity"){
      humidity = part2.toInt();
    }
  }
/*bool door1State = false;
String userInput = "";
int humudity = 0;*/
  if(analogRead(A0)<=250){
    digitalWrite(light3,HIGH);
  }else{
    digitalWrite(light3,LOW);
  }
  if (currMillis - door2.prevTime >= door2.duration && door2.atStart && !door2.oldAtStart) {//close
    Serial.println("i want to close the door2");
    door2.oldAtStart = door2.atStart = true;
    door2.prevTime = currMillis;
    door2.interpolation = door2.endingAngle;
  }
  if (currMillis - door2.prevTime >= door2.duration && !door2.atStart && door2.oldAtStart) {//open
    Serial.println("i want to open the door2");
    door2.oldAtStart = door2.atStart = false;
    door2.prevTime = currMillis;
    door2.interpolation = door2.startingAngle;
  }
  if(door2.interpolation == door2.startingAngle){//open
    float progress = float(currMillis - door2.prevTime) / door2.duration;
    int targetPosition = door2.startingAngle + int(float(door2.endingAngle - door2.startingAngle) * progress);
    targetPosition = constrain(targetPosition, door2.startingAngle, door2.endingAngle);
    door2.servo.write(targetPosition);
    if(progress >= 1.0){
      door2.interpolation = -999;
      door2.servo.write(door2.endingAngle);
    }
  }else if(door2.interpolation == door2.endingAngle){//close
    float progress = float(currMillis - door2.prevTime) / door2.duration;
    int targetPosition = door2.endingAngle + int(float(door2.startingAngle - door2.endingAngle) * progress);
    targetPosition = constrain(targetPosition, door2.startingAngle, door2.endingAngle);
    door2.servo.write(targetPosition);
    if(progress >= 1.0){
      door2.interpolation = -999;
      door2.servo.write(door2.startingAngle);
    }
  }

  if (currMillis - window.prevTime >= window.duration && window.atStart && !window.oldAtStart) {//close
    //Serial.println("i want to close the window");
    window.oldAtStart = window.atStart = true;
    window.prevTime = currMillis;
    window.interpolation = window.endingAngle;
  }
  if (currMillis - window.prevTime >= window.duration && !window.atStart && window.oldAtStart && humidity<20) {//open
    //Serial.println("i want to open the window");
    window.oldAtStart = window.atStart = false;
    window.prevTime = currMillis;
    window.interpolation = window.startingAngle;
  }
  if(window.interpolation == window.startingAngle){//open
    float progress = float(currMillis - window.prevTime) / window.duration;
    int targetPosition = window.startingAngle + int(float(window.endingAngle - window.startingAngle) * progress);
    targetPosition = constrain(targetPosition, window.startingAngle, window.endingAngle);
    Serial.println(String(progress)+" -> "+String(targetPosition));
    window.servo.write(targetPosition);
    if(progress >= 1.0){
      window.interpolation = -999;
      window.servo.write(window.endingAngle);
    }
  }else if(window.interpolation == window.endingAngle){//close
    float progress = float(currMillis - window.prevTime) / window.duration;
    int targetPosition = window.endingAngle + int(float(window.startingAngle - window.endingAngle) * progress);
    targetPosition = constrain(targetPosition, window.startingAngle, window.endingAngle);
    window.servo.write(targetPosition);
    if(progress >= 1.0){
      window.interpolation = -999;
      window.servo.write(window.startingAngle);
    }
  }
}
